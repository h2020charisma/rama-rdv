
tasks:
  # loads Ne and Si spectra in native formats 
  # performs baseline removal and normalisation
  # stores the normalized spectra as .cha files 
  - source: tasks/calibration_load.py
    product: 
      nb: "{{output_folder}}/calibration/calibration_load.ipynb"
      data: "{{calibrated_files}}/source"
    params:
      laser_wl: "{{laser_wl4calibration}}"
      test_only: False    
      neon_file: "{{neon_file}}"
      silicon_file: "{{silicon_file}}"
  
  # loads the Ne and Si from .cha files 
  # performs x-calibration according to D3.3
  # stores the calibration model (pickle at the moment)
  # uses CalibrationModel from rc2 (nexusformat branch)
  - source: tasks/calibration_neon.py
    product: 
      nb: "{{output_folder}}/calibration/calibration_neon.ipynb"
      data:  "{{calibrated_files}}"
      model: "{{calibrated_files}}/{{calibration_file}}"
    params:
      laser_wl: "{{laser_wl4calibration}}"
      prominence_coeff: "{{prominence_coeff}}"

  # Loads the calibration model saved from calibration_neon task
  # applies to input_file (tbd - modify to apply to set of files)
  # the idea is to apply the model to all spectra taken with the same instrument
  # ploomber is nice here, as the model derivation will be executed only once
  - source: tasks/calibration_nexus.py
    product: 
      nb: "{{output_folder}}/calibration/calibration_nexus.ipynb"
      nexus: "{{calibrated_files}}/results/"
    params:
      input_folder: "{{input_folder}}"
      input_files: "{{input_files}}"
  
  - source: tasks/calibration_assessment.py
    product: 
      nb: "{{output_folder}}/calibration/calibration_assessment.ipynb"
    params:
      input_files: "{{input_files}}"
      model: "{{calibrated_files}}/{{calibration_file}}"